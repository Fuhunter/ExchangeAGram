[
 {
  "file": "/Users/Niclas/Desktop/xcode_projekte/ExchangeAGram/FeedViewController.swift",
  "offset": 1522,
  "remove": 5072,
  "text": "! AppDelegate)\n        let context:NSManagedObjectContext = appDelegate.managedObjectContext!\n        feedArray = try! context.executeFetchRequest(request)\n        collectionView.reloadData()\n    }\n        \n    // UICollectionViewDataSource\n    \n    func numberOfSectionsInCollectionView(collectionView: UICollectionView) -> Int {\n        return 1\n    }\n    \n    func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return feedArray.count\n    }\n    \n    func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\n        \n        var cell:FeedCell = collectionView.dequeueReusableCellWithReuseIdentifier(\"Cell\", forIndexPath: indexPath) as! FeedCell\n        \n        let thisItem = feedArray[indexPath.row] as! FeedItem\n        \n        if thisItem.filtered == true {\n            let returnedImage = UIImage(data: thisItem.image)!\n            let image = UIImage(CGImage: returnedImage.CGImage, scale: 1.0, orientation: UIImageOrientation.Right)\n        } else {\n            cell.imageView.image = UIImage(data: thisItem.image)\n        }\n        \n        cell.captionLabel.text = thisItem.caption\n        \n        return cell\n    }\n\n    @IBAction func profileTapped(sender: UIBarButtonItem) {\n        self.performSegueWithIdentifier(\"profileSegue\", sender: nil)\n    }\n    \n    @IBAction func snapBarButtonTapped(sender: UIBarButtonItem) {\n        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.Camera) {\n            let cameraController = UIImagePickerController()\n            cameraController.delegate = self\n            cameraController.sourceType = UIImagePickerControllerSourceType.Camera\n            \n            let mediaTypes:[AnyObject] = [kUTTypeImage]\n            cameraController.mediaTypes = mediaTypes\n            cameraController.allowsEditing = false\n            \n            self.presentViewController(cameraController, animated: true, completion: nil)\n        }\n        else if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.PhotoLibrary) {\n            let photoLibraryController = UIImagePickerController()\n            photoLibraryController.delegate = self\n            photoLibraryController.sourceType = UIImagePickerControllerSourceType.PhotoLibrary\n            \n            let mediaTypes:[AnyObject] = [kUTTypeImage]\n            \n            photoLibraryController.mediaTypes = mediaTypes\n            photoLibraryController.allowsEditing = false\n            \n            self.presentViewController(photoLibraryController, animated: true, completion: nil)\n        }\n        else {\n            let alertController = UIAlertController(title: \"Alert\", message: \"You're Device doesn't support camera or PhotoLibrary\", preferredStyle: UIAlertControllerStyle.Alert)\n            alertController.addAction(UIAlertAction(title: \"Ok\", style: UIAlertActionStyle.Default, handler: nil))\n            self.presentViewController(alertController, animated: true, completion: nil)\n        }\n    }\n    \n    // UIImagePickerControllerDelegate\n    \n    func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) {\n        let image = info[UIImagePickerControllerOriginalImage] as! UIImage\n        let imageData = UIImageJPEGRepresentation(image, 1.0)\n        let thumbNailData = UIImageJPEGRepresentation(image, 0.1)\n        \n        let mangedObjectContext = (UIApplication.sharedApplication().delegate as! AppDelegate).managedObjectContext\n        let entityDescription = NSEntityDescription.entityForName(\"FeedItem\", inManagedObjectContext: mangedObjectContext!)\n        let feedItem = FeedItem(entity: entityDescription!, insertIntoManagedObjectContext: mangedObjectContext!)\n        \n        feedItem.image = imageData\n        feedItem.caption = \"test caption\"\n        feedItem.thumbNail = thumbNailData\n        \n        feedItem.latitude = locationManager!.location.coordinate.latitude\n        feedItem.longitude = locationManager!.location.coordinate.longitude\n        \n        let UUID = NSUUID().UUIDString\n        \n        feedItem.uniqueID = UUID\n        \n        feedItem.filtered = false\n        \n        (UIApplication.sharedApplication().delegate as! AppDelegate).saveContext()\n        \n        feedArray.append(feedItem)\n        \n        self.dismissViewControllerAnimated(true, completion: nil)\n        \n        self.collectionView.reloadData()\n    }\n    \n    // UICollectionViewDelegate\n    \n    func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {\n        let thisItem = feedArray[indexPath.row] as! FeedItem\n        \n        var filterVC = FilterViewController()\n        filterVC.thisFeedItem = thisItem\n        \n        self.navigationController?.pushViewController(filterVC, animated: false)\n    }\n    \n    \n    // CLLocationManagerDelegate\n    \n    func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]",
 }
]
