[
 {
  "file": "/Users/Niclas/Desktop/xcode_projekte/ExchangeAGram/ExchangeAGram/FilterViewController.swift",
  "offset": 1960,
  "remove": 6320,
  "text": "! FilterCell\n        \n        cell.imageView.image = placeHolderImage\n        \n        // GCD/MultiThreading\n        \n        let filterQueue:dispatch_queue_t = dispatch_queue_create(\"filter queue\", nil)\n        \n        dispatch_async(filterQueue, { () -> Void in\n            let filterImage = self.getCachedImage(indexPath.row)\n            \n            dispatch_async(dispatch_get_main_queue(), { () -> Void in\n                cell.imageView.image = filterImage\n            })\n        })\n        \n        return cell\n    }\n    \n    // UICollectionViewDelegate\n    \n    func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {\n        createUIAlertController(indexPath)\n    }\n    \n    // Helper Function\n\n    func photoFilters () -> [CIFilter] {\n        \n        let blur = CIFilter(name: \"CIGaussianBlur\")\n        let instant = CIFilter(name: \"CIPhotoEffectInstant\")\n        let noir = CIFilter(name: \"CIPhotoEffectNoir\")\n        let transfer = CIFilter(name: \"CIPhotoEffectTransfer\")\n        let unsharpen = CIFilter(name: \"CIUnsharpMask\")\n        let monochrome = CIFilter(name: \"CIColorMonochrome\")\n        \n        let colorControls = CIFilter(name: \"CIColorControls\")\n        colorControls.setValue(0.5, forKey: kCIInputSaturationKey)\n        \n        let sepia = CIFilter(name: \"CISepiaTone\")\n        sepia.setValue(kIntensity, forKey: kCIInputIntensityKey)\n        \n        let colorClamp = CIFilter(name: \"CIColorClamp\")\n        colorClamp.setValue(CIVector(x: 0.9, y: 0.9, z: 0.9, w: 0.9), forKey: \"inputMaxComponents\")\n        colorClamp.setValue(CIVector(x: 0.2, y: 0.2, z: 0.2, w: 0.2), forKey: \"inputMinComponents\")\n        \n        let composite = CIFilter(name: \"CIHardLightBlendMode\")\n        composite.setValue(sepia.outputImage, forKey: kCIInputImageKey)\n        \n        let vignette = CIFilter(name: \"CIVignette\")\n        vignette.setValue(composite.outputImage, forKey: kCIInputImageKey)\n        vignette.setValue(kIntensity * 2, forKey: kCIInputIntensityKey)\n        vignette.setValue(kIntensity * 30, forKey: kCIInputRadiusKey)\n        \n        return [blur, instant, noir, transfer, unsharpen, monochrome, colorControls, sepia, colorClamp, composite, vignette]\n    }\n    \n    func filteredImageFromImage (imageData: NSData, filter: CIFilter) -> UIImage {\n        \n        let unfilteredImage = CIImage(data: imageData)\n        filter.setValue(unfilteredImage, forKey: kCIInputImageKey)\n        let filteredImage:CIImage = filter.outputImage\n        \n        let extent = filteredImage.extent\n        let cgImage:CGImageRef = context.createCGImage(filteredImage, fromRect: extent)\n        let finalImage = UIImage(CGImage: cgImage)\n        \n        return finalImage\n    }\n    \n    // UIAlertController Helper Functions\n    \n    func createUIAlertController(indexPath: NSIndexPath) {\n        let alert = UIAlertController(title: \"Photo Options\", message: \"Please choose an option\", preferredStyle: UIAlertControllerStyle.Alert)\n        \n        alert.addTextFieldWithConfigurationHandler { (textField) -> Void in\n            textField.placeholder = \"Add Caption!\"\n            textField.secureTextEntry = false\n        }\n        \n        var text:String\n        \n        let textField = alert.textFields![0] as UITextField\n        \n        if textField.text != nil {\n            text = textField.text\n        }\n        \n        let photoAction = UIAlertAction(title: \"Post Photo to Facebook with Caption\", style: UIAlertActionStyle.Destructive) { (UIAlertAction) -> Void in\n            \n            self.shareToFacebook(indexPath)\n            let text = textField.text\n            self.saveFilterToCoreData(indexPath, caption: text)\n        }\n        \n        alert.addAction(photoAction)\n        \n        let saveFilterAction = UIAlertAction(title: \"Save Filter without posting on Facebook\", style: UIAlertActionStyle.Default) { (UIAlertAction) -> Void in\n            \n            let text = textField.text\n            self.saveFilterToCoreData(indexPath, caption: text)\n        }\n        \n        alert.addAction(saveFilterAction)\n        \n        let cancelAction = UIAlertAction(title: \"Select another Filter\", style: UIAlertActionStyle.Cancel) { (UIAlertAction) -> Void in\n            \n        }\n        \n        alert.addAction(cancelAction)\n        \n        self.presentViewController(alert, animated: true, completion: nil)\n    }\n    \n    func saveFilterToCoreData(indexPath: NSIndexPath, caption: String) {\n        let filterImage = self.filteredImageFromImage(self.thisFeedItem.image, filter: self.filters[indexPath.row])\n        \n        let imageData = UIImageJPEGRepresentation(filterImage, 1.0)\n        \n        self.thisFeedItem.image = imageData\n        \n        let thumbNailData = UIImageJPEGRepresentation(filterImage, 0.1)\n        \n        self.thisFeedItem.thumbNail = thumbNailData\n        \n        self.thisFeedItem.caption = caption\n        \n        self.thisFeedItem.filtered = true\n        \n        (UIApplication.sharedApplication().delegate as! AppDelegate).saveContext()\n        \n        self.navigationController?.popViewControllerAnimated(true)\n    }\n    \n    func shareToFacebook(indexPath: NSIndexPath) {\n        let filterImage = self.filteredImageFromImage(self.thisFeedItem.image, filter: self.filters[indexPath.row])\n        \n        let photos:NSArray = [filterImage]\n        var params = FBPhotoParams()\n        params.photos = photos\n        \n        FBDialogs.presentMessageDialogWithPhotoParams(params, clientState: nil) { (call, result, error) -> Void in\n            \n        }\n    }\n    \n    // caching functions\n    \n    func cacheImage(imageNumber: Int) {\n        let fileName = \"\\(thisFeedItem.uniqueID)\\(imageNumber)\"\n        let uniquePath = (tmp as NSString).stringByAppendingPathComponent(fileName)\n        \n        if !NSFileManager.defaultManager().fileExistsAtPath(fileName) {\n            let data = self.thisFeedItem.thumbNail\n            let filter = self.filters[imageNumber]\n            let image = filteredImageFromImage(data, filter: filter)\n            UIImageJPEGRepresentation(image, 1.0).writeToFile(uniquePath, atomically: true)\n        }\n    }\n    \n    func getCachedImage(imageNumber:Int) -> UIImage {\n        let fileName = \"\\(thisFeedItem.uniqueID)\\(imageNumber)\"\n        let uniquePath = (tmp as NSString)",
 }
]
